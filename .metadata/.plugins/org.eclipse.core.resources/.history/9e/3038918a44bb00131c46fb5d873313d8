package org.lineware.MaryousHat;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;

import com.badlogic.gdx.backends.android.AndroidApplication;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdSize;
import com.google.android.gms.ads.AdView;
import com.google.example.games.basegameutils.GameHelper;
import com.google.example.games.basegameutils.GameHelper.GameHelperListener;

public class MainActivity extends Activity implements IActivityRequestHandler, ActionResolver, GameHelperListener{
	private AdView adView;
	private GameHelper gameHelper;
	
	private static final String adUnitId = "ca-app-pub-4144520465652247/1197354314";
	
	private final int SHOW_ADS = 1;
	
	private final int HIDE_ADS = 0;
	
	public MainActivity(){
		gameHelper = new GameHelper(this);
		gameHelper.enableDebugLog(true, "GPBS");

	}
	
	
	@SuppressLint("HandlerLeak")
	protected Handler handler = new Handler()
    {
        @Override
        public void handleMessage(Message msg) {
            switch(msg.what) {
                case SHOW_ADS:
                {
                    adView.setVisibility(View.VISIBLE);
                    break;
                }
                case HIDE_ADS:
                {
                    adView.setVisibility(View.GONE);
                    break;
                }
            }
        }
    };

	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        RelativeLayout layout = new RelativeLayout(this);

        
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, 
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);

        View gameView = initializeForView(new MHGame(this,this), false);
        
        adView = new AdView(this);
        adView.setAdSize(AdSize.SMART_BANNER);
        adView.setAdUnitId(adUnitId);
        
        AdRequest adRequest = new AdRequest.Builder()
        	.addTestDevice(AdRequest.DEVICE_ID_EMULATOR)
        	.build();
        
        adView.loadAd(adRequest);
        
        layout.addView(gameView);
        
        RelativeLayout.LayoutParams adParams =
        		new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,
        				RelativeLayout.LayoutParams.WRAP_CONTENT);
        adParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
        adParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        
        layout.addView(adView, adParams);
        
        setContentView(layout);
        
        gameHelper.setup(this);
        
    }
    

    
	@Override
	public void showAds(boolean show) {
		handler.sendEmptyMessage(show ? SHOW_ADS : HIDE_ADS);
	}

	@Override
	public boolean getSignedInGPGS() {
		return gameHelper.isSignedIn();
		
	}

	@Override
	public void loginGPGS() {
		try {
			runOnUiThread(new Runnable() {
				
				@Override
				public void run() {
					gameHelper.beginUserInitiatedSignIn();
					
				}
			});
		}catch (final Exception ex){
			
		}
	}

	@Override
	public void submitScoreGPGS(int score) {
		gameHelper.getGamesClient().submitScore(getString(R.string.leaderboard_maryous_hat_leader_board), score);
	}

	@Override
	public void unlockAchievementGPGS(int score) {
		switch(score){
		case 5:
			gameHelper.getGamesClient().unlockAchievement(getString(R.string.achievement_pup));
			break;
		case 10:
			gameHelper.getGamesClient().unlockAchievement(getString(R.string.achievement_dog));
			break;
		case 30:
			gameHelper.getGamesClient().unlockAchievement(getString(R.string.achievement_human));
			break;
		case 50:
			gameHelper.getGamesClient().unlockAchievement(getString(R.string.achievement_squire));
			break;
		case 100:
			gameHelper.getGamesClient().unlockAchievement(getString(R.string.achievement_knight));
			break;
		}
	}

	@Override
	public void getLeaderboardGPGS() {
		startActivityForResult(gameHelper.getGamesClient().getLeaderboardIntent(getString(R.string.leaderboard_maryous_hat_leader_board)), 100);
	}

	@Override
	public void getAchievementsGPGS() {
		startActivityForResult(gameHelper.getGamesClient().getAchievementsIntent(), 101);
	}

	@Override
	public void onSignInFailed() {
		
	}

	@Override
	public void onSignInSucceeded() {
		
	}



	@Override
	public void onStartGSPS() {
		gameHelper.onStart(this);
	}



	@Override
	public void onStopGSPS() {
		gameHelper.onStop();
	}
	
	
}